module testbench();

timeunit 10ns;	// Half clock cycle at 50 MHz
			// This is the amount of time represented by #1 
timeprecision 1ns;

// These signals are internal because the processor will be 
// instantiated as a submodule in testbench.
logic Clk = 0;
logic Reset;
logic [3:0] KEY;
logic [6:0] HEX0, HEX1;

logic [7:0]  VGA_R, VGA_G, VGA_B;
logic        VGA_CLK, VGA_SYNC_N, VGA_BLANK_N, VGA_VS, VGA_HS;      //VGA horizontal sync signal
wire  [15:0] OTG_DATA;     //CY7C67200 Data bus 16 Bits
logic [1:0]  OTG_ADDR;     //CY7C67200 Address 2 Bits
logic        OTG_CS_N, OTG_RD_N, OTG_WR_N, OTG_RST_N,  OTG_INT;      //CY7C67200 Interrupt
logic [12:0] DRAM_ADDR;    //SDRAM Address 13 Bits
wire  [31:0] DRAM_DQ;      //SDRAM Data 32 Bits
logic [1:0]  DRAM_BA;      //SDRAM Bank Address 2 Bits
logic [3:0]  DRAM_DQM;     //SDRAM Data Mast 4 Bits
logic        DRAM_RAS_N,   //SDRAM Row Address Strobe
														DRAM_CAS_N,   //SDRAM Column Address Strobe
														DRAM_CKE,     //SDRAM Clock Enable
														DRAM_WE_N,    //SDRAM Write Enable
														DRAM_CS_N,    //SDRAM Chip Select
														DRAM_CLK;
		
// Instantiating the DUT
// Make sure the module and signal names match with those in your design
final_project final_project0(.*);	

assign PC = lab6_toplevel0.my_slc.PC;
assign IR = lab6_toplevel0.my_slc.IR;
assign MDR = lab6_toplevel0.my_slc.MDR;
assign MAR = lab6_toplevel0.my_slc.MAR;
assign GatePC = lab6_toplevel0.my_slc.GatePC;
assign LD_MAR = lab6_toplevel0.my_slc.LD_MAR;  
assign PCMUX = lab6_toplevel0.my_slc.PCMUX;  
assign LD_PC = lab6_toplevel0.my_slc.LD_PC;  
assign bus = lab6_toplevel0.my_slc.bus;
assign hex_data = lab6_toplevel0.my_slc.memory_subsystem.hex_data;
//assign R0_out = lab6_toplevel0.my_slc3.reg_file0.R0_Out;

// Toggle the clock
// #1 means wait for a delay of 1 timeunit
always begin : CLOCK_GENERATION
#1 Clk = ~Clk;
end

initial begin: CLOCK_INITIALIZATION
    Clk = 0;
end 


//internal monitoring
//logic [15:0] IR, PC, MAR, MDR;
//logic [15:0] ALU_out;                                              
//assign IR = lab6_toplevel0. ;
//assign ALU_out = 

// Testing begins here
// The initial block is not synthesizable
// Everything happens sequentially inside an initial block
// as in a software program


//for simulation, need to show 3 instructions from 
//ADD/ADDi/AND/ANDi/NOT
//BR/JMP/JSR
//LDR/STR
initial begin: TEST_VECTORS
Reset = 1;		// reset system
Run = 1;
Continue = 1;
S = 16'h0000;


#2 Reset = 0;
#2 Reset = 1;

//#1  force bus = 16'hFFFF;
//#0  force LD = 8'b00000001;
//
//#1 release bus;
//#0	release LD;

//#1 force R0_out = 16'hFFFF;
//#1 release R0_out;

#2 S = 16'h0003;

#2 Run = 0; 	// toggle run	
//#1	release ADDR;
#2 Run = 1;

#60 S = 16'hFFFF;
#15 S = 16'h000F;
#15 S = 16'h00F0;
#15 S = 16'h0F00;
#15 S = 16'hF000; 

#10 Reset = 0;
#2 Reset =1;

#1 S=16'h0006;

#1 Run=0;
#2 Run =1;

#1 S=16'h1111;

#2 Continue = 0;
#2 Continue = 1;

end
endmodule
